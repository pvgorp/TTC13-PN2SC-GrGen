/*
* This file is part of PN2SC.
*  
* PN2SC: Petri-Net to Statechart translator based on GrGen.NET rules
* Copyright (C) 2010,2011,2012,2013 Pieter Van Gorp (pieter(at)pietervangorp.com)
* 
* PN2SC is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* PN2SC is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with PN2SC; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

// @author Pieter Van Gorp
// @title A transformation from petri-nets to hierarchical statecharts

using PetriNets__ecore, PetriModel, StateChart, TraceModel;

#include "HSC-GrGen2EugeniaXMI.grg"
#include "ImportPetriEMF.grg"

rule trans_place {
	p:Place;	
	modify {
		p -:PN2HSC-> or:HSCorState -:HSCcontains-> s:HSCBasicState;
		eval {
			s.name = p.name;
		}		
	}
}

rule trans_transition {
	t:Transition;
	modify {				
		t -:PN2HSC-> or:HSCorState -:HSCcontains-> e:HSCHyperEdge;
		eval {
			e.name=t.name;
		}
	}
}

rule trans_pre { 
	s:HSCBasicState <-:HSCcontains- :HSCorState <-:PN2HSC- :Place -:pre-> t:Transition -:PN2HSC-> :HSCorState -:HSCcontains-> e:HSCHyperEdge;
	modify {
		s -:HSCsource-> e;
	}
}

rule trans_post {
	s:HSCBasicState <-:HSCcontains- :HSCorState <-:PN2HSC- :Place <-:post -t:Transition -:PN2HSC-> :HSCorState -:HSCcontains-> e:HSCHyperEdge;
	modify {
		e -:HSCtarget-> s;
	}
}

rule moveAllOrChildrenFromTo(or1:HSCorState, or2: HSCorState) {
	modify {
		exec([moveORchildFromTo(or1,or2)]);
	}
}

pattern RoguePrePlace(t:Transition) {
	s1:Place-:pre->t<-:pre-s2:Place;
	alternative {
		ViolatingArcIn {
			t2:Transition-:post->s1;
			negative {
				t2-:post->s2;
			}
		}
		ViolatingArcOut {
			t2:Transition<-:pre-s1;
			negative {
				t2<-:pre-s2;
			}
		}
	}
}

pattern RoguePostPlace(t:Transition) {
	s1:Place<-:post-t-:post->s2:Place; 
	alternative {
		ViolatingArcIn {
			t2:Transition-:post->s1;
			negative {
				t2-:post->s2;
			}
		}
		ViolatingArcOut {
			t2:Transition<-:pre-s1;
			negative {
				t2<-:pre-s2;
			}
		}
	}
}

/*
* RULE: reduction step 1a (AND)
*/
rule trans_AND_join {
	-:pre->t:Transition<-:pre-; // at least two incoming arcs	
	
	// precondition for 1a (TODO: factor out commonality!)
	negative {
		:RoguePrePlace(t);
	}
	negative { // pre version of the other NAC
		:RoguePostPlace(t);
	} modify {		
		p:Place -:pre->t; // completion of the folding
		:HSCandState <-:HSCcontains- :HSCorState <-:PN2HSC- p; // update tree and maintain trace		
		eval {
			p.name= "ANDJOIN_"+t.name;
		}
		exec([handlePrePlace_AND_join(t,p)]);
	}
}

/*
* RULE: reduction step 1b (AND)
*/
rule trans_AND_split {
	<-:post-t:Transition-:post->; // at least two outgoing arcs		

	// precondition for 1b
	negative {
		:RoguePrePlace(t);
	}
	negative { // pre version of the other NAC
		:RoguePostPlace(t);
	}
	modify {		
		p:Place <-:post-t; // completion of the folding
		:HSCandState <-:HSCcontains- :HSCorState <-:PN2HSC- p; // update tree and maintain trace
		eval {
			p.name= "ANDSPLIT_"+t.name;
		}
		exec([handlePrePlace_AND_split(t,p)]);
	}
}

/** 
* RULE: reduction step 2 (OR)
*/
rule transform_singleton_pre_post {
  prePl:Place-pre1:pre->t:Transition-post1:post->postPl:Place;
  prePl 	-tl1:PN2HSC-> or1:HSCorState;
  postPl 	-tl2:PN2HSC-> or2:HSCorState;
  // BEGIN1 PVG: THIS EXTENSION BREAKS MODULARITY concerning the extension for XOR on top of the AND basis
  t 		-tl3:PN2HSC-> or3:HSCorState;
  // END1
  hom(prePl,postPl);
  hom(or1,or2);
  hom(tl1,tl2);

	// precondition for 2
  negative {
    i1:Place-:pre->t<-:pre-i2:Place; // must be singleton pre
  }
  negative {
    o1:Place<-:post-t-:post->o2:Place; // must be singleton post
  }
  :NoForkJoinOnDifferentPlaces(prePl,postPl);
  modify {
    pNew:Place -:PN2HSC-> or4:HSCorState;	
	delete(pre1);
	delete(post1);
	delete(t);
	exec(	[move_incoming_arcs(prePl,pNew)]// redirect all edges to prePl, mind that singleton property does not nesessarily hold for otherTranss connected to prePl
		| 	[move_outgoing_arcs(prePl,pNew)] 
		|	[move_incoming_arcs(postPl,pNew)]
		| 	[move_outgoing_arcs(postPl,pNew)]
		|	moveAllOrChildrenFromTo(or1,or4)
		|	moveAllOrChildrenFromTo(or2,or4) // mind use of '|': not '&&' since needs to work on begin and end too
		|	moveAllOrChildrenFromTo(or3,or4)
		| 	(cleanupP(prePl) | cleanupP(postPl))
		|	(cleanupS(or1) | cleanupS(or2) | cleanupS(or3))
	);
  }
}

pattern NoForkJoinOnDifferentPlaces(prePl:Place,postPl:Place) {
	alternative {
		SelfLoopsUnconstrained {
			hom(prePl,postPl);
			if { prePl == postPl; }
		}
		ConstrainedOtherwise {
			negative {
				prePl-:pre->t2:Transition<-:pre-postPl;// no JOIN from the input/output places
			}
			negative {
				prePl<-:post-t2:Transition-:post->postPl;// no FORK to the input/output places
			}
		}
	}
}

rule moveORchildFromTo(or1:HSCorState, or2:HSCorState) {  
	or1 -c1:HSCcontains-> s1:HSCState;
	negative {
		or2 -:HSCcontains-> s1;
	}
	negative {
		or1 <-:HSCcontains-;
	}
	modify {
		delete(c1);
		or2 -:HSCcontains-> s1;
	}
}

rule cleanupS(or:HSCorState) {
	negative {
		or <-:HSCcontains-;
	}
	modify {
		delete(or);
	}
}

/**
* Helper for step 1a from paper
*/
rule handlePrePlace_AND_join(t:Transition,p:Place) {
	q_i:Place -e2:pre-> t;	 // visit each place in the preset
	q_i -:PN2HSC-> or:HSCorState; // take the OR node of that place
	p -:PN2HSC-> :HSCorState -:HSCcontains-> parentAND:HSCandState; // take the AND node in which it should be contained
	modify {
		or <-:HSCcontains- parentAND; // put the OR node in the new AND node
		exec([move_incoming_arcs(q_i,p)]|[move_outgoing_arcs(q_i,p)]|[cleanupP(q_i)]);
	}
}

/**
* Helper for step 1b from paper
*/
rule handlePrePlace_AND_split(t:Transition,p:Place) {
	q_i:Place <-e:post- t;	
	q_i -:PN2HSC-> or:HSCorState; // take the OR node of that place
	p -:PN2HSC-> :HSCorState -:HSCcontains-> parentAND:HSCandState; // take the AND node in which it should be contained
	modify {
		or <-:HSCcontains- parentAND; // put the OR node in the new AND node
		exec([move_incoming_arcs(q_i,p)]|[move_outgoing_arcs(q_i,p)]|[cleanupP(q_i)]);
	}
}

rule cleanupP(p:Place) {
	modify {
		delete(p);
	}
}


rule cleanupT(t:Transition) {
	modify {
		delete(t);
	}
}

rule move_incoming_arcs(srcPlace:Place,trgPlace:Place ) {
	otherTrans:Transition -e1:post-> srcPlace; 
	alternative { 
		NotYetPresent {
			negative {
				otherTrans -:post-> trgPlace;
			}
			modify {
				otherTrans -:post-> trgPlace;
			}
		}
		AlreadyPresent {
			otherTrans -:post-> trgPlace;
			modify {
				// in this case: do not link otherTrans to trgPlace again!
			}
		}
	}
	modify {			
		delete(e1);			
	}
}

rule move_outgoing_arcs(srcPlace:Place,trgPlace:Place ) {
	otherTrans:Transition <-e1:pre- srcPlace; 
	alternative { 
		NotYetPresent {
			negative {
				otherTrans <-:pre- trgPlace;
			}
			modify {
				otherTrans <-:pre- trgPlace;
			}
		}
		AlreadyPresent {
			otherTrans <-:pre- trgPlace;
			modify {
				// in this case: do not link otherTrans to trgPlace again!
			}
		}
	}
	modify {			
		delete(e1);			
	}
}